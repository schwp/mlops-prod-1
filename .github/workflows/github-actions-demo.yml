name: GitHub Actions MLOPS Prod 1
on: [push]
permissions:
  contents: read
  packages: write
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ps-mlops-prod1
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Test dependencies
        run: |
          pip install -r test/requirements.txt

      - name: Run Docker container
        run: |
          docker run -d -p 5757:5757 --name test-mlops ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest

      - name: Wait for application to be ready
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:5757/docs > /dev/null; then
              echo "Application is running"; exit 0;
            fi
            echo "Waiting for the application to run"; sleep 2;
          done
          echo "Error: application did not start"; exit 1

      - name: Run tests
        run: |
          pytest test

      - name: Stop Docker container
        if: always()
        run: |
          docker stop test-mlops || true
          docker rm test-mlops || true

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            docker pull ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest
            docker stop ps-mlops-prod1 || true
            docker rm ps-mlops-prod1 || true
            docker run -d -p 5757:5757 --name ps-mlops-prod1 ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest
